!function(t){var n={};function o(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=t,o.c=n,o.d=function(t,n,e){o.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,n){if(1&n&&(t=o(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(o.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)o.d(e,r,function(n){return t[n]}.bind(null,r));return e},o.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(n,"a",n),n},o.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},o.p="",o(o.s=0)}([function(t,n,o){"use strict";o.r(n);var e,r=function(){function t(){}return t.prototype.set_x=function(t){this.x_=t},t.prototype.set_y=function(t){this.y_=t},t.prototype.set_z=function(t){this.z_=t},t.prototype.set_w=function(t){this.w_=t},t.prototype.x=function(){return this.x_},t.prototype.y=function(){return this.y_},t.prototype.z=function(){return this.z_},t.prototype.w=function(){return this.w_},t}(),i=(e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var o in n)n.hasOwnProperty(o)&&(t[o]=n[o])})(t,n)},function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}),u=function(t){function n(n,o,e){return t.call(this)||this}return i(n,t),n.prototype.set=function(n,o,e){t.prototype.set_x.call(this,n),t.prototype.set_y.call(this,o),t.prototype.set_z.call(this,e)},n.prototype.x=function(){return t.prototype.x.call(this)},n.prototype.y=function(){return t.prototype.y.call(this)},n.prototype.z=function(){return t.prototype.z.call(this)},n}(r),p=(new p5(function(t){t.preload=function(){},t.setup=function(){t.createCanvas(t.windowWidth,t.windowHeight,t.WEBGL),p=t.windowWidth,c=t.windowHeight},t.windowResized=function(){t.createCanvas(t.windowWidth,t.windowHeight,t.WEBGL),p=t.windowWidth,c=t.windowHeight},t.draw=function(){t.background(255,0,0);var n=t.mouseX-p/2,o=t.mouseY-c/2,e=t.random(c);f.set(n,o,e),t.fill(0,0,0),t.ellipse(f.x(),f.y(),50,50)}}),0),c=0,f=new u(0,0,0)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,